# -*- coding: utf-8 -*-
"""StockPriceLSTM.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/12IkhRD2Xd04irajvPMVZWtL8b8gdsar7
"""

import numpy as np
import pandas_datareader as web
import matplotlib.pyplot as plt
from sklearn.preprocessing import MinMaxScaler 
import pandas as pd
from keras.models import Sequential
from keras.layers import Dense, LSTM, Dropout
from tensorflow import keras
plt.style.use('fivethirtyeight')

df = web.DataReader('INDF.JK', data_source='yahoo', start = '2018-01-01', end = '2020-08-01')

df.shape

plt.figure(figsize=(20,10))
plt.title('Stock price plot')
#plt.plot(df['Open'])
plt.plot(df['Close'])
plt.xlabel('date', fontsize = 10)
plt.ylabel('price', fontsize = 10)
#plt.show()

data = df.filter(['Close'])
dataset = data.values
training_data_len = len(dataset) #642

scaler = MinMaxScaler()
scaled_data = scaler.fit_transform(dataset)

h = 80 #Jumlah test
inp = 60 #Besar input

train_data = scaled_data[0:training_data_len-h,:]
x_train = []
y_train = []
for i in range(inp, len(train_data)):
  x_train.append(train_data[i-inp:i, 0])
  y_train.append(train_data[i, 0])
  #if i<=60:
  #  print(x_train)
  #  print(y_train)

x_train, y_train = np.array(x_train), np.array(y_train)

x_train = np.reshape(x_train, (x_train.shape[0], x_train.shape[1], 1))

x_train.shape[1]

model = Sequential()
model.add(LSTM(60, return_sequences=True, input_shape=(x_train.shape[1], 1)))
model.add(LSTM(100, return_sequences=False))
model.add(Dropout(0.4))
model.add(Dense(25))
model.add(Dense(1))
model.compile(optimizer = keras.optimizers.Adam(learning_rate=0.003), loss = 'mean_squared_error')

model.fit(x_train, y_train, batch_size=1, epochs=3)
#trained_weight = model.get_weights()[0]
#trained_bias = model.get_weights()[1]
#print('Weight: ', trained_weight)
#print('Bias: ', trained_bias)

test_data = scaled_data[training_data_len-(inp+h):training_data_len,:]
x_test = []
y_test = []
for i in range(inp, len(test_data)):
  x_test.append(test_data[i-inp:i, 0])
  y_test.append(train_data[i, 0])


x_test,y_test = np.array(x_test), np.array(y_test)

x_test = np.reshape(x_test, (x_test.shape[0], x_test.shape[1], 1))

predictions = model.predict(x_test)
rmse = np.sqrt(np.mean((predictions- y_test)**2))
print(rmse)
predictions = scaler.inverse_transform(predictions)

train = data[:training_data_len-inp]
valid = data[training_data_len-h:training_data_len]
valid['Predictions'] = predictions
plt.figure(figsize=(20,10))
plt.title('Harga Closing ASII 1 Januari 2018 s.d. 1 September 2020')
plt.xlabel('Tanggal', fontsize = 16 )
plt.ylabel('Harga Close', fontsize = 16 )
plt.plot(train['Close'])
plt.plot(valid[['Close','Predictions']])
str1 = 'Learning rate: {}'.format(learning_rate)
str2 = 'Epoch: {}'.format(epoch)
plt.annotate(str1, (x,4200), (x,4200), fontsize=12)
plt.annotate(str2, (x,4100), (x,4100), fontsize=12)
plt.legend(['Train','Val','Predictions'], loc = 'lower right')
plt.show()

#Prediksi untuk n hari kedepan
hari = int(input("Jumlah hari: "))
data_pred = scaled_data[training_data_len-inp:training_data_len,:] #input dataset untuk hari pertama
for i in range(0,hari):
  x_pred = 0
  x_pred = np.vstack(data_pred[i:i+inp, 0])
  x_pred = np.array(x_pred)
  x_pred = np.reshape(x_pred, (x_pred.shape[1], x_pred.shape[0], 1))
  predict = model.predict(x_pred)
  data_pred = np.vstack((data_pred, predict))
hasil_prediksi = data_pred[len(data_pred)-hari:len(data_pred),:]
hasil_prediksi = scaler.inverse_transform(hasil_prediksi)
print(hasil_prediksi) #Hasil prediksi
plt.plot(hasil_prediksi)
